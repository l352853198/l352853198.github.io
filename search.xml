<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ip查找</title>
    <url>/2022/02/20/ip%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h2 id="网站访问最多的IP"><a href="#网站访问最多的IP" class="headerlink" title="网站访问最多的IP"></a>网站访问最多的IP</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>海量登录日志保存在一个大文件中，无法直接在内存读取，求访问最多的那个IP</p>
<h3 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h3><p>对 IP 进行哈希映射，接着使用 HashMap 统计重复 IP 的次数，最后计算出重复次数最多的 IP。</p>
<blockquote>
<p>注：这里只需要找出出现次数最多的 IP，可以不必使用堆，直接用一个变量 max 即可。</p>
</blockquote>
<h3 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h3><ol>
<li>分而治之，进行哈希取余；</li>
<li>使用 HashMap 统计频数；</li>
<li><strong>小顶堆</strong>求最大TOPN；<strong>大顶堆</strong>求最小TOPN。</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>security</title>
    <url>/2022/03/13/springSecurity/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>认证</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT 身份认证</title>
    <url>/2022/05/28/jwt/</url>
    <content><![CDATA[<p>关于jwt的一些浅薄理解</p>
<h2 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h2><h6 id="在JWT以前的登录流程："><a href="#在JWT以前的登录流程：" class="headerlink" title="在JWT以前的登录流程："></a>在JWT以前的登录流程：</h6><p>1、用户登录；</p>
<p>2、服务端收到请求，验证用户名和密码</p>
<p>3、服务端将随机token发送给客户端</p>
<p>4、每次请求都发送该token</p>
<p>5、服务端验证token</p>
<h2 id="Token-认证的优势"><a href="#Token-认证的优势" class="headerlink" title="Token 认证的优势"></a>Token 认证的优势</h2><p>使用 token 进行身份认证优势如下：</p>
<h3 id="1-无状态"><a href="#1-无状态" class="headerlink" title="1.无状态"></a>1.无状态</h3><p>token包含所有验证信息，增加系统可用性、伸缩性，减轻服务器压力；</p>
<h3 id="2-避免CSRF-攻击"><a href="#2-避免CSRF-攻击" class="headerlink" title="2.避免CSRF 攻击"></a>2.避免CSRF 攻击</h3><p>**CSRF是 **跨站请求伪造，用你的身份去发送一些对你不友好的请求。举个简单的例子：利用用户身份给服务端发送不良请求,也就是通过你的 Cookie 向银行发出请求。但是token是可以避免cookie的</p>
<h6 id="那为什么-token-不会存在这种问题呢？"><a href="#那为什么-token-不会存在这种问题呢？" class="headerlink" title="那为什么 token 不会存在这种问题呢？"></a><strong>那为什么 token 不会存在这种问题呢？</strong></h6><p>前端通过某些方式会给每个发到后端的请求加上这个 token,这样就不会出现 CSRF 漏洞的问题。不良请求没有token，所以这个请求将是非法的。</p>
<p>但是这样会存在  XSS 攻击中被盗的风险，为了避免 XSS 攻击，你可以选择将 token 存储在标记为<code>httpOnly</code>  的cookie 中。但是，这样又导致了你必须自己提供CSRF保护。</p>
<h3 id="3-单点登录友好"><a href="#3-单点登录友好" class="headerlink" title="3.单点登录友好"></a>3.单点登录友好</h3><p>使用 Session 进行身份认证的话，实现单点登录，需要我们把用户的 Session 信息保存在一台电脑上，并且还会遇到常见的 Cookie 跨域的问题。但是，使用 token 进行认证的话，一般来说token存在于redis当中的话， token 被保存在客户端，不会存在这些问题。</p>
<h3 id="4-适合移动端应用"><a href="#4-适合移动端应用" class="headerlink" title="4.适合移动端应用"></a>4.适合移动端应用</h3><p>使用 token 进行身份认证可以被客户端存储就能够使用，而且 token 还可以跨语言使用。</p>
<p>上述所说可以是token+redis的形式，也可以通过一些算法生成，而JWT就是一种具体的实现方式</p>
<h2 id="jwt问题解决方案"><a href="#jwt问题解决方案" class="headerlink" title="jwt问题解决方案"></a>jwt问题解决方案</h2><h3 id="1-在一些需要认证失效的场景下-token-还有效"><a href="#1-在一些需要认证失效的场景下-token-还有效" class="headerlink" title="1.在一些需要认证失效的场景下 token 还有效"></a>1.在一些需要认证失效的场景下 token 还有效</h3><p>与之类似的具体相关场景有：</p>
<ol>
<li>退出登录;</li>
<li>修改密码;</li>
<li>删除用户；</li>
<li>注销用户。</li>
</ol>
<p>使用 token 认证的方式就不好解决了。我们也说过了，token 一旦派发出去，如果后端不增加其他逻辑的话，它在失效之前都是有效的。总结了下面几种方案：</p>
<ul>
<li><strong>将 token 存入内存数据库</strong>：将 token 存入 数据库，redis 是现在多数情况下的选择。根据用户id直接删除当前用户的token即可。但是，这样会导致每次使用 token 发送请求都要先从 DB 中查询 token 是否存在的步骤，而且违背了 JWT 的无状态原则。</li>
<li><strong>黑名单机制</strong>：redis维护一个黑名单，如果想让某个 token 失效的话，就 token 加入到黑名单。然后，每次使用 token 进行请求先判断是否在黑名单当中。</li>
<li><strong>修改密钥 (Secret)</strong> : 我们为每个用户都创建一个专属密钥，如果我们想让某个 token 失效，我们直接修改对应用户的密钥即可。但是，这样相比于前两种引入内存数据库带来了危害更大，比如：1) 对于分布式服务来说，每次发出新的 token ，都需要在每台服务器都更新密匙。为此，你需要将密钥存储在数据库或其他外部服务中，这样和 Session 认证就没太大区别了。 2) 如果用户同时在两个浏览器打开系统，或者在手机端也打开了系统，一个终端的退出，将导致另外的终端也将退出，这是不可取的。</li>
<li><strong>保持令牌的有效期限短并经常轮换</strong> ：很简单的一种方式。这对于用户的体验不好，而且需要用户经常登录。</li>
</ul>
<p>对于修改密码后 token 还有效问题的解决还是比较容易的，使用用户的密码的哈希值对 token 进行签名。密码更改，则任何先前的令牌将自动无法验证。</p>
<h3 id="2-token-的刷新时长问题"><a href="#2-token-的刷新时长问题" class="headerlink" title="2.token 的刷新时长问题"></a>2.token 的刷新时长问题</h3><p>token 有效期一般都建议设置的不太长，那么 token 过期后如何认证，如何实现动态刷新 token，避免用户经常需要重新登录？</p>
<p>我们先来看看在 Session 认证中一般的做法：<strong>假如 session 的有效期30分钟，如果 30 分钟内用户有访问，就把 session 有效期延长30分钟。</strong></p>
<ol>
<li><p><strong>验证成功后刷新token</strong>：这种方案满足于大部分场景。假设服务端给的 token 有效期设置为60分钟，服务端每次进行校验时，如果发现 token 的有效期马上快过期了，服务端就重新生成 token 给客户端。客户端每次请求都检查新旧token，如果不一致，则更新本地的token。这种做法的问题是仅仅在快过期的时候请求才会更新 token ,对客户端不是很友好。</p>
</li>
<li><p><strong>每次请求都返回新 token</strong> :开销会比较大，每次都需要自己是生成。</p>
</li>
<li><p><strong>token 有效期设置到半夜</strong> ：对于安全性不高的情况下可以满足，即便晚上的用户出了问题，出现概率也很低。</p>
</li>
<li><p><strong>用户登录返回两个 token</strong> ：第一个是 userToken ，当前登录有效期，refreshToken为一个固定较长时间的token。客户端登录后，将 userToken和refreshToken 保存在本地，每次访问将 userToken 传给服务端。服务端校验 accessToken 的有效性，如果过期的话，就将 refreshToken 传给服务端。如果有效，服务端就生成新的 userToken 给客户端。否则，客户端就重新登录即可。</p>
<p>缺陷：</p>
<ol>
<li>需要前端业务逻辑进行配合；</li>
<li>用户注销的时候需要将两个token都无效；</li>
<li>重新请求获取 token 的过程中会有短暂 token 不可用的情况（可以通过在客户端设置定时器，当accessToken 快过期的时候，提前去通过 refreshToken 获取新的accessToken）。</li>
</ol>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JWT 最适合的场景是不需要服务端保存用户状态的场景，无法注销这种情况这种场景对于绝大数系统都不适用，并且请求头体积大，还需要进行加密解密，为了解决这些问题，又需要引入redis，这样又本末倒置了。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://learnku.com/articles/17883?order_by=vote_count&">JWT 超详细分析</a></li>
<li><a href="https://github.com/Snailclimb">JavaGuide</a></li>
</ul>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>topK问题</title>
    <url>/2022/02/09/topK%E9%97%AE%E9%A2%98%E6%8E%A2%E8%AE%A8/</url>
    <content><![CDATA[<h2 id="TopK-问题"><a href="#TopK-问题" class="headerlink" title="TopK 问题"></a>TopK 问题</h2><p>记录一下对于topK问题的总结。</p>
<p>大数据涉及topk问题。在设计数据结构和算法的时候，主要讨论的是此类问题的适配程度，降低时间复杂度，还是降低空间复杂度是该类问题的核心。</p>
<p>首先，常见 topK 问题的例子：</p>
<ol>
<li>给定 10 亿 个 int 数字，在其中找出最大的 10 个；</li>
<li>给定 10 亿个 int 数字，在其中找出最大的 10 个（这 10 个数字依次排序）；</li>
<li>给定 10 亿个 string 类型的数字，在其中找出最大的 k 个。</li>
</ol>
<p>上述类似问题，核心点都有区别<br><br></p>
<h3 id="1-堆排序法"><a href="#1-堆排序法" class="headerlink" title="1. 堆排序法"></a>1. 堆排序法</h3><p>与快排和希尔排序的时间复杂度同是O（nlogn），但堆排序可以维护一个K个数字的小顶堆，当新加入的数字大于堆顶，将堆顶剔除；</p>
<h6 id="利用优先队列PriorityQueue解决"><a href="#利用优先队列PriorityQueue解决" class="headerlink" title="利用优先队列PriorityQueue解决"></a>利用优先队列PriorityQueue解决</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">max</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;topK.txt&quot;</span>));</span><br><span class="line">            String length;</span><br><span class="line">            <span class="keyword">while</span> ((length = br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">                seclet(Integer.parseInt(len));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;result.txt&quot;</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k &amp;&amp; !pq.isEmpty(); i++) &#123;</span><br><span class="line">                bw.write(pq.poll().toString());</span><br><span class="line">                bw.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            bw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1000000000</span>;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(k);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seclet</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pq.size() &lt; k)&#123; </span><br><span class="line">            pq.add(num);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pq.peek() &lt; num)&#123;</span><br><span class="line">            pq.poll();</span><br><span class="line">            pq.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="JAVA原生态代码解决"><a href="#JAVA原生态代码解决" class="headerlink" title="JAVA原生态代码解决"></a>JAVA原生态代码解决</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span>[] data, <span class="type">int</span> size, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">leftNode</span> <span class="operator">=</span> <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">rightNode</span> <span class="operator">=</span> <span class="number">2</span> * index + <span class="number">2</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> index;</span><br><span class="line">      <span class="keyword">if</span> (leftNode &lt; size &amp;&amp; data[leftNode] &lt; data[min]) &#123;</span><br><span class="line">          min = leftNode;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rightNode &lt; size &amp;&amp; data[rightNode] &lt; data[min]) &#123;</span><br><span class="line">          min = rightNode;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (min != index) &#123;</span><br><span class="line">          swap(data[min],data[index]);</span><br><span class="line">          <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> data[min];</span><br><span class="line">          init(data, size, min);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/04/03/1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JWT 身份认证</title>
    <url>/2022/06/02/spring%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<p>关于jwt的一些浅薄理解</p>
<h2 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h2><h6 id="在JWT以前的登录流程："><a href="#在JWT以前的登录流程：" class="headerlink" title="在JWT以前的登录流程："></a>在JWT以前的登录流程：</h6><p>1、用户登录；</p>
<p>2、服务端收到请求，验证用户名和密码</p>
<p>3、服务端将随机token发送给客户端</p>
<p>4、每次请求都发送该token</p>
<p>5、服务端验证token</p>
<h2 id="Token-认证的优势"><a href="#Token-认证的优势" class="headerlink" title="Token 认证的优势"></a>Token 认证的优势</h2><p>使用 token 进行身份认证优势如下：</p>
<h3 id="1-无状态"><a href="#1-无状态" class="headerlink" title="1.无状态"></a>1.无状态</h3><p>token包含所有验证信息，增加系统可用性、伸缩性，减轻服务器压力；</p>
<h3 id="2-避免CSRF-攻击"><a href="#2-避免CSRF-攻击" class="headerlink" title="2.避免CSRF 攻击"></a>2.避免CSRF 攻击</h3><p>**CSRF是 **跨站请求伪造，用你的身份去发送一些对你不友好的请求。举个简单的例子：利用用户身份给服务端发送不良请求,也就是通过你的 Cookie 向银行发出请求。但是token是可以避免cookie的</p>
<h6 id="那为什么-token-不会存在这种问题呢？"><a href="#那为什么-token-不会存在这种问题呢？" class="headerlink" title="那为什么 token 不会存在这种问题呢？"></a><strong>那为什么 token 不会存在这种问题呢？</strong></h6><p>前端通过某些方式会给每个发到后端的请求加上这个 token,这样就不会出现 CSRF 漏洞的问题。不良请求没有token，所以这个请求将是非法的。</p>
<p>但是这样会存在  XSS 攻击中被盗的风险，为了避免 XSS 攻击，你可以选择将 token 存储在标记为<code>httpOnly</code>  的cookie 中。但是，这样又导致了你必须自己提供CSRF保护。</p>
<h3 id="3-单点登录友好"><a href="#3-单点登录友好" class="headerlink" title="3.单点登录友好"></a>3.单点登录友好</h3><p>使用 Session 进行身份认证的话，实现单点登录，需要我们把用户的 Session 信息保存在一台电脑上，并且还会遇到常见的 Cookie 跨域的问题。但是，使用 token 进行认证的话，一般来说token存在于redis当中的话， token 被保存在客户端，不会存在这些问题。</p>
<h3 id="4-适合移动端应用"><a href="#4-适合移动端应用" class="headerlink" title="4.适合移动端应用"></a>4.适合移动端应用</h3><p>使用 token 进行身份认证可以被客户端存储就能够使用，而且 token 还可以跨语言使用。</p>
<p>上述所说可以是token+redis的形式，也可以通过一些算法生成，而JWT就是一种具体的实现方式</p>
<h2 id="jwt问题解决方案"><a href="#jwt问题解决方案" class="headerlink" title="jwt问题解决方案"></a>jwt问题解决方案</h2><h3 id="1-在一些需要认证失效的场景下-token-还有效"><a href="#1-在一些需要认证失效的场景下-token-还有效" class="headerlink" title="1.在一些需要认证失效的场景下 token 还有效"></a>1.在一些需要认证失效的场景下 token 还有效</h3><p>与之类似的具体相关场景有：</p>
<ol>
<li>退出登录;</li>
<li>修改密码;</li>
<li>删除用户；</li>
<li>注销用户。</li>
</ol>
<p>使用 token 认证的方式就不好解决了。我们也说过了，token 一旦派发出去，如果后端不增加其他逻辑的话，它在失效之前都是有效的。总结了下面几种方案：</p>
<ul>
<li><strong>将 token 存入内存数据库</strong>：将 token 存入 数据库，redis 是现在多数情况下的选择。根据用户id直接删除当前用户的token即可。但是，这样会导致每次使用 token 发送请求都要先从 DB 中查询 token 是否存在的步骤，而且违背了 JWT 的无状态原则。</li>
<li><strong>黑名单机制</strong>：redis维护一个黑名单，如果想让某个 token 失效的话，就 token 加入到黑名单。然后，每次使用 token 进行请求先判断是否在黑名单当中。</li>
<li><strong>修改密钥 (Secret)</strong> : 我们为每个用户都创建一个专属密钥，如果我们想让某个 token 失效，我们直接修改对应用户的密钥即可。但是，这样相比于前两种引入内存数据库带来了危害更大，比如：1) 对于分布式服务来说，每次发出新的 token ，都需要在每台服务器都更新密匙。为此，你需要将密钥存储在数据库或其他外部服务中，这样和 Session 认证就没太大区别了。 2) 如果用户同时在两个浏览器打开系统，或者在手机端也打开了系统，一个终端的退出，将导致另外的终端也将退出，这是不可取的。</li>
<li><strong>保持令牌的有效期限短并经常轮换</strong> ：很简单的一种方式。这对于用户的体验不好，而且需要用户经常登录。</li>
</ul>
<p>对于修改密码后 token 还有效问题的解决还是比较容易的，使用用户的密码的哈希值对 token 进行签名。密码更改，则任何先前的令牌将自动无法验证。</p>
<h3 id="2-token-的刷新时长问题"><a href="#2-token-的刷新时长问题" class="headerlink" title="2.token 的刷新时长问题"></a>2.token 的刷新时长问题</h3><p>token 有效期一般都建议设置的不太长，那么 token 过期后如何认证，如何实现动态刷新 token，避免用户经常需要重新登录？</p>
<p>我们先来看看在 Session 认证中一般的做法：<strong>假如 session 的有效期30分钟，如果 30 分钟内用户有访问，就把 session 有效期延长30分钟。</strong></p>
<ol>
<li><p><strong>验证成功后刷新token</strong>：这种方案满足于大部分场景。假设服务端给的 token 有效期设置为60分钟，服务端每次进行校验时，如果发现 token 的有效期马上快过期了，服务端就重新生成 token 给客户端。客户端每次请求都检查新旧token，如果不一致，则更新本地的token。这种做法的问题是仅仅在快过期的时候请求才会更新 token ,对客户端不是很友好。</p>
</li>
<li><p><strong>每次请求都返回新 token</strong> :开销会比较大，每次都需要自己是生成。</p>
</li>
<li><p><strong>token 有效期设置到半夜</strong> ：对于安全性不高的情况下可以满足，即便晚上的用户出了问题，出现概率也很低。</p>
</li>
<li><p><strong>用户登录返回两个 token</strong> ：第一个是 userToken ，当前登录有效期，refreshToken为一个固定较长时间的token。客户端登录后，将 userToken和refreshToken 保存在本地，每次访问将 userToken 传给服务端。服务端校验 accessToken 的有效性，如果过期的话，就将 refreshToken 传给服务端。如果有效，服务端就生成新的 userToken 给客户端。否则，客户端就重新登录即可。</p>
<p>缺陷：</p>
<ol>
<li>需要前端业务逻辑进行配合；</li>
<li>用户注销的时候需要将两个token都无效；</li>
<li>重新请求获取 token 的过程中会有短暂 token 不可用的情况（可以通过在客户端设置定时器，当accessToken 快过期的时候，提前去通过 refreshToken 获取新的accessToken）。</li>
</ol>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JWT 最适合的场景是不需要服务端保存用户状态的场景，无法注销这种情况这种场景对于绝大数系统都不适用，并且请求头体积大，还需要进行加密解密，为了解决这些问题，又需要引入redis，这样又本末倒置了。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://learnku.com/articles/17883?order_by=vote_count&">JWT 超详细分析</a></li>
<li><a href="https://github.com/Snailclimb">JavaGuide</a></li>
</ul>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式 ID</title>
    <url>/2022/05/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84id%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h2 id="分布式-ID"><a href="#分布式-ID" class="headerlink" title="分布式 ID"></a>分布式 ID</h2><h3 id="ID介绍"><a href="#ID介绍" class="headerlink" title="ID介绍"></a>ID介绍</h3><p>日常开发过程中，各类数据在数据库都会有个唯一id相对应，形成1对1的关系 ，比如说一个系统中用户的id，一个id对应一个用户，作为唯一标识，就如同用户的身份证一样；</p>
<h3 id="分布式-ID？"><a href="#分布式-ID？" class="headerlink" title="分布式 ID？"></a>分布式 ID？</h3><p>分布式id是一种场景下的id，其应对的是分布式情况下，不同服务器的id；</p>
<p>如mysql的一些访问量比较大的表，需要进行分库操作，那么分库后的自增，可能出现同一id对应两个用户的现象。那么就需要生成分布式id来应对分布式的场景，他的目的还是为了在分布式的情况下保证1对1 的关系</p>
<p>分布式 ID 需要满足下面这些要求：</p>
<p>全局唯一 ；</p>
<p>安全 ；</p>
<p>有序递增；</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h4 id="数据库主键自增"><a href="#数据库主键自增" class="headerlink" title="数据库主键自增"></a>数据库主键自增</h4><p>通过关系型数据库的自增主键产生来唯一的 ID：该数据库的该表只做自增id这么一件事，每次的自增id都从这里取</p>
<ul>
<li><strong>优点</strong> ：实现简单，消耗存储很低</li>
<li><strong>缺点</strong> ： 如果需求过大，对该数据库压力较大</li>
</ul>
<h4 id="数据库号段模式"><a href="#数据库号段模式" class="headerlink" title="数据库号段模式"></a>数据库号段模式</h4><p>数据库的号段模式目前主流生成分布式id的方式。像滴滴开源的tinyid 就是基于这种方式来做的。</p>
<p>以 MySQL 来讲解此方式。</p>
<p><strong>1.创建一个数据库表。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `idTable` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `current_max_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;当前最大id&#x27;</span>,</span><br><span class="line">  `step` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;号段的长度&#x27;</span>,</span><br><span class="line">  `version` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;版本号&#x27;</span>,</span><br><span class="line">  `type`    <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;业务类型&#x27;</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p><code>current_max_id</code> 字段</p>
<p><code>step</code>字段代表范围值</p>
<p>获取的批量 id范围是： <code>current_max_id ~ current_max_id+step</code>。</p>
<p><code>version</code> 字段主要用于解决并发问题（乐观锁）,<code>type</code> 主要用于表示业务类型。</p>
<p>减少数据库的查询</p>
<p><strong>数据库号段模式的优缺点:</strong></p>
<ul>
<li><strong>优点</strong> ：ID 有序递增、存储消耗空间小</li>
<li><strong>缺点</strong> ：安全问题，电商项目，都能知道你的订单数量等了，这非常重要</li>
</ul>
<h4 id="Redis：分布式自增id"><a href="#Redis：分布式自增id" class="headerlink" title="Redis：分布式自增id"></a>Redis：分布式自增id</h4><p>优点： 性能高，有序</p>
<p>缺点： 不安全</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h4><p>jdk自带生成的uuid一般是通过时间、mac地址、命名空间、随机性等一些规则进行生成；</p>
<p>缺点：过长，存储空间大；</p>
<p>查询影响性能；</p>
<h4 id="Snowflake-雪花算法"><a href="#Snowflake-雪花算法" class="headerlink" title="Snowflake(雪花算法)"></a>Snowflake(雪花算法)</h4><ul>
<li><strong>第 0 位</strong>： 符号位（标识正负），始终为 0，没有用，不用管。</li>
<li><strong>第 1~41 位</strong> ：一共 41 位，用来表示时间戳，单位是毫秒，可以支撑 2 ^41 毫秒（约 69 年）</li>
<li><strong>第 42~52 位</strong> ：一共 10 位，一般来说，前 5 位表示机房 ID，后 5 位表示机器 ID（实际项目中可以根据实际情况调整）。这样就可以区分不同集群&#x2F;机房的节点。</li>
<li><strong>第 53~64 位</strong> ：一共 12 位，用来表示序列号。 序列号为自增值，代表单台机器每毫秒能够产生的最大 ID 数(2^12 &#x3D; 4096),也就是说单台机器每毫秒最多可以生成 4096 个 唯一 ID。</li>
</ul>
<p>我们再来看看 Snowflake 算法的优缺点 ：</p>
<ul>
<li><strong>优点</strong> ：生成速度比较快、id自增、灵活</li>
<li><strong>缺点</strong> ：依赖于时间都有可能产品重复id，因为不同机器的时间可能有误差，不能保证时间的唯一性。</li>
<li></li>
</ul>
<h3 id="开源框架"><a href="#开源框架" class="headerlink" title="开源框架"></a>开源框架</h3><h4 id="UidGenerator：xx"><a href="#UidGenerator：xx" class="headerlink" title="UidGenerator：xx"></a>UidGenerator：xx</h4><h4 id="Leaf"><a href="#Leaf" class="headerlink" title="Leaf"></a>Leaf</h4><h4 id="Tinyid"><a href="#Tinyid" class="headerlink" title="Tinyid"></a>Tinyid</h4><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>类似一些其他的中间件，比如zookeeper也能帮助我们生成唯一 ID。根据自己项目，在限定的资源下来完成id的生成工作。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
  </entry>
  <entry>
    <title>零矩阵</title>
    <url>/2022/04/22/%E7%AE%97%E6%B3%95-%E9%9B%B6%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<p>编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。</p>
<p>示例 1：</p>
<p>输入：<br>[<br>  [1,1,1],<br>  [1,0,1],<br>  [1,1,1]<br>]<br>输出：<br>[<br>  [1,0,1],<br>  [0,0,0],<br>  [1,0,1]<br>]</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/zero-matrix-lcci">https://leetcode.cn/problems/zero-matrix-lcci</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<p>java代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZeroes</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFirstRowHaveZero</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFirstColHaveZero</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                isFirstColHaveZero = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                isFirstRowHaveZero = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">                    matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="number">0</span> || matrix[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFirstColHaveZero) &#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFirstRowHaveZero) &#123;</span><br><span class="line">                matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>认证授权基础</title>
    <url>/2022/03/24/%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<h2 id="认证-和授权？"><a href="#认证-和授权？" class="headerlink" title="认证 和授权？"></a>认证 和授权？</h2><p>这是一个绝大多数人都会混淆的问题。首先先从读音上来认识这两个名词，很多人都会把它俩的读音搞混，所以我建议你先先去查一查这两个单词到底该怎么读，他们的具体含义是什么。</p>
<ul>
<li><strong>认证</strong> ：验证其身份，一般来说，登陆成功，就是知道了你的身份可以登录，就算认证成功。</li>
<li><strong>授权</strong> ：认证成功，根据当前用户身份，让系统知道该用户能够访问哪一些权限。</li>
</ul>
<p>认证、授权这两个功能一般在我们的系统中被结合在一起使用，目的就是为了保护我们系统的安全性：目前有shiro，spring security这些框架能够做一些事情，spring security是基于spring开发的，完美适配，不过该框架过重，shiro需要和spring进行整合，当然，如果是简单的认证过程，通过随机生成的token就能够完成客户端以及服务器间的认证过程。</p>
<h2 id="RBAC-模型"><a href="#RBAC-模型" class="headerlink" title="RBAC 模型"></a>RBAC 模型</h2><p>RBAC 即基于角色的权限访问控制（Role-Based Access Control）。这是一种通过角色关联权限，角色同时又关联用户的授权的方式。</p>
<p>简单地说：一个用户可以拥有若干角色，每一个角色又可以被分配若干权限，这样就构造成“用户-角色-权限” 的授权模型。在这种模型中，用户与角色、角色与权限之间构成了多对多的关系，</p>
<p><strong>在 RBAC 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。</strong></p>
<p>这样的目的，就是权限与角色进行绑定，用户在页面控制的是角色的权限，而不是用户的权限，提高灵活度，又省去每一个用户分配权限的麻烦程度，这是一种折中的方式，去进行权限控制。</p>
<p>通过这个权限模型，我们可以创建不同的角色并为不同的角色分配不同的权限范围（菜单）。</p>
<p>通常来说，如果系统对于权限控制要求比较严格的话，一般都会选择使用 RBAC 模型来做权限控制。</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><code>Cookie</code> 和 <code>Session</code> 都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p>
<p>维基百科是这样定义 <code>Cookie</code> 的：</p>
<blockquote>
<p><code>Cookies</code> 是某些网站为了辨别用户身份而储存在用户本地终端上的数据（通常经过加密）。</p>
</blockquote>
<p>简单来说： **<code>Cookie</code> 存放在客户端，用于存储客户信息。</p>
<p>下面是 <code>Cookie</code> 的一些应用案例：</p>
<ol>
<li>我们在 <code>Cookie</code> 中保存已经登录过的用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了。除此之外，<code>Cookie</code> 还能保存用户首选项，主题和其他设置信息。</li>
<li>使用 <code>Cookie</code> 保存 <code>SessionId</code> 或者 <code>Token</code> ，向后端发送请求的时候带上 <code>Cookie</code>，这样后端就能取到 <code>Session</code> 或者 <code>Token</code> 了。这样就能记录用户当前的状态了，因为 HTTP 协议是无状态的。</li>
<li><code>Cookie</code> 还可以用来记录和分析用户行为。举个简单的例子你在网上购物的时候，因为 HTTP 协议是没有状态的，如果服务器想要获取你在某个页面的停留状态或者看了哪些商品，一种常用的实现方式就是将这些信息存放在 <code>Cookie</code></li>
</ol>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/2023/02/12/1/MD%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>相比WYSIWYG编辑器</p>
<p><strong>优点：</strong><br> 1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br> 2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p>
<p><strong>缺点：</strong><br> 1、需要记一些语法（当然，是很简单。五分钟学会）。<br> 2、有些平台不支持Markdown编辑模式。</p>
<p>还好，简书是支持Markdown编辑模式的。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">开启方式：设置<span class="punctuation">-&gt;</span>默认编辑器<span class="punctuation">-&gt;</span>Markdown编辑器</span><br></pre></td></tr></table></figure>

<h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置为标题的文字前面加#来表示<br> 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr>
<h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li>
</ul>
<p>要加粗的文字左右分别用两个*号包起来</p>
<ul>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li>
</ul>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<ul>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li>
</ul>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<ul>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li>
</ul>
<p>要加删除线的文字左右分别用两个~~号包起来</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><strong>这是加粗的文字</strong><br> <em>这是倾斜的文字</em><br> *<strong>这是斜体加粗的文字*</strong><br> <del>这是加删除线的文字</del></p>
<hr>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br> n个…<br> 貌似可以一直加下去，但没神马卵用</p>
<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p>效果如下：<br> 可以看到，显示效果是一样的。</p>
<hr>
<hr>
<hr>
<hr>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 <span class="string">&#x27;&#x27;</span>图片title<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">![blockchain](https:<span class="comment">//ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span></span><br><span class="line">u=<span class="number">702257389</span>,<span class="number">1274025419</span>&amp;fm=<span class="number">27</span>&amp;gp=<span class="number">0.</span>jpg <span class="string">&quot;区块链&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp" alt="img"></p>
<p>blockchain</p>
<p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p>
<p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。<br> 关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。<a href="https://www.jianshu.com/p/ea1eb11db63f">markdown图床</a></p>
<h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">&quot;超链接title&quot;</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[简书](http:<span class="comment">//jianshu.com)</span></span><br><span class="line">[百度](http:<span class="comment">//baidu.com)</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b">简书</a><br> <a href="https://links.jianshu.com/go?to=http://baidu.com">百度</a></p>
<p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;超链接地址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>超链接名<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>简书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：<br> 无序列表用 - + * 任何一种都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：<br> 数字加点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级和下一级之间敲三个空格即可</strong></p>
<ul>
<li>一级无序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级无序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ul>
<ol>
<li>一级有序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级有序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ol>
<hr>
<h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">表头|<span class="params">表头</span>|表头</span><br><span class="line">---|<span class="params">:--:</span>|---:</span><br><span class="line">内容|<span class="params">内容</span>|内容</span><br><span class="line">内容|<span class="params">内容</span>|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 |<span class="params"> 包起来。此处省略</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">姓名|<span class="params">技能</span>|排行</span><br><span class="line">--|<span class="params">:--:</span>|--:</span><br><span class="line">刘备|<span class="params">哭</span>|大哥</span><br><span class="line">关羽|<span class="params">打</span>|二哥</span><br><span class="line">张飞|<span class="params">骂</span>|三弟</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th align="center">技能</th>
<th align="right">排行</th>
</tr>
</thead>
<tbody><tr>
<td>刘备</td>
<td align="center">哭</td>
<td align="right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td align="center">打</td>
<td align="right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td align="center">骂</td>
<td align="right">三弟</td>
</tr>
</tbody></table>
<h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br> 单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`代码内容`</span></span><br></pre></td></tr></table></figure>

<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">(<span class="string">``</span><span class="string">`)</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">(`</span><span class="string">``</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
</blockquote>
<p>示例：</p>
<p>单行代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`create database hero;`</span></span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">         echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>单行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database hero;</span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">  echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes <span class="keyword">or</span> No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"><span class="title function_ invoke__">cond</span>(yes)-&gt;e</span><br><span class="line"><span class="title function_ invoke__">cond</span>(no)-&gt;op</span><br><span class="line">&amp;```</span><br></pre></td></tr></table></figure>

<p>效果如下：<br> 简书不支持流程图，所以截了个图</p>
<p><img src="https://upload-images.jianshu.io/upload_images/6860761-9d9524ba31047696.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/751/format/webp" alt="img"></p>
<p>流程图.png</p>
]]></content>
      <categories>
        <category>书写</category>
      </categories>
      <tags>
        <tag>简单笔记</tag>
      </tags>
  </entry>
</search>
